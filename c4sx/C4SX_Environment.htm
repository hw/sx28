<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./C4SX_Environment_files/filelist.xml">
<link rel=Edit-Time-Data href="./C4SX_Environment_files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>C4SX Environment</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Bob Senser</o:Author>
  <o:LastAuthor>Bob Senser</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:LastPrinted>2007-09-06T00:48:00Z</o:LastPrinted>
  <o:Created>2007-09-06T00:48:00Z</o:Created>
  <o:LastSaved>2007-09-06T00:48:00Z</o:LastSaved>
  <o:Pages>11</o:Pages>
  <o:Words>3266</o:Words>
  <o:Characters>18618</o:Characters>
  <o:Company> </o:Company>
  <o:Lines>155</o:Lines>
  <o:Paragraphs>37</o:Paragraphs>
  <o:CharactersWithSpaces>22864</o:CharactersWithSpaces>
  <o:Version>9.6926</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Lucida Console";
	panose-1:2 11 6 9 4 5 4 2 2 4;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:-2147482993 6144 0 0 31 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:16.0pt;
	font-family:Arial;
	mso-font-kerning:16.0pt;}
h2
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	font-family:Arial;
	font-style:italic;}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:13.0pt;
	font-family:Arial;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h5
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	text-decoration:underline;
	text-underline:single;}
h6
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:6;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:normal;
	text-decoration:underline;
	text-underline:single;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-even-footer:url("./C4SX_Environment_files/header.htm") ef1;
	mso-footer:url("./C4SX_Environment_files/header.htm") f1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:49161178;
	mso-list-type:hybrid;
	mso-list-template-ids:717095386 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l0:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l1
	{mso-list-id:280303096;
	mso-list-type:hybrid;
	mso-list-template-ids:141325046 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l1:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2
	{mso-list-id:901991064;
	mso-list-type:hybrid;
	mso-list-template-ids:-881543412 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l2:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3
	{mso-list-id:934363309;
	mso-list-type:hybrid;
	mso-list-template-ids:-507105800 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l3:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4
	{mso-list-id:985938428;
	mso-list-type:hybrid;
	mso-list-template-ids:1608947276 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l4:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l5
	{mso-list-id:1715617667;
	mso-list-type:hybrid;
	mso-list-template-ids:1989451842 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l5:level1
	{mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l6
	{mso-list-id:2053576621;
	mso-list-type:hybrid;
	mso-list-template-ids:-27863380 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l6:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7
	{mso-list-id:2144543484;
	mso-list-type:hybrid;
	mso-list-template-ids:1615885288 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l7:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
</head>

<body lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<p class=MsoNormal>C4SX Environment, Version 03</p>

<p class=MsoNormal>Document Version 03d</p>

<p class=MsoNormal>09/05/2007</p>

<p class=MsoNormal>Bob Senser</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h1>Overview</h1>

<p class=MsoNormal>C4SX is an extremely low-cost/no-cost environment for
running C code on the SX, supporting both the SX28 and the SX48 devices.<span
style="mso-spacerun: yes">  </span>It uses the editor of your choice (we
suggest several), an SX C compiler called 'CC1B', the Parallax SX-Key software
and hardware, and some specialized utility programs and C source modules.<span
style="mso-spacerun: yes">  </span>C4SX is a grassroots project, born out of
necessity, facilitating the use C code on the SX chips, via the Parallax
SX-Key.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>This document describes the C4SX environment and how to
install and use it. All of the software components can be downloaded at no
cost.<span style="mso-spacerun: yes">  </span>Some of these components are free
software, others are open source and the CC1B compiler itself is available as a
downloadable beta.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>This document's first major section is a Quick Start that
helps you quickly get C4SX installed and running.<span style="mso-spacerun:
yes">  </span>It shows how to run a small C sample program, which blinks an LED
attached to port B, pin 0. The remainder of this document covers more details
about the various components of C4SX, and covers some options and information
you might find useful.<span style="mso-spacerun: yes">  </span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Feedback is important.<span style="mso-spacerun: yes"> 
</span>The preferred method for providing C4SX feedback is via the Parallax SX
Forum.<span style="mso-spacerun: yes">  </span>You can also contact the C4SX
coordinator at c4sx@rwsenser.com.<span style="mso-spacerun: yes">  </span>If
you are thinking of using the CC1B compiler, one of the main C4SX components,
for more than one commercial product then you should contact sales@bkndcom (see
the CC1B free beta readme.txt for details).</p>

<h3>IMPORTANT: Upgrading from C4SX Version 01 or 02</h3>

<p class=MsoNormal><u>Please install the latest version of CC1B compiler,
version 0.7A or better.</u><span style="mso-spacerun: yes">  </span>This new
CC1B version contains important fixes.<span style="mso-spacerun: yes"> 
</span>If you have already installed C4SX V01 or V02 then please rename your
current CC1B directory to CC1Bv01 or CC1Bv02 before you install this new
version of C4SX.<span style="mso-spacerun: yes">  </span>Once you have
installed this new version, you can manually copy your C programs from your old
directory to the new CC1B directory.<span style="mso-spacerun: yes"> 
</span>These steps are necessary because the C4SX.bat script, the sample
programs and the CC1B2SX utility/reformatter have changed in subtle ways and
conflicts will arise if the two versions are merged.<span style="mso-spacerun:
yes">  </span>You might need to make some minor changes to the C programs you
have written.<span style="mso-spacerun: yes">  </span>See the &quot;Changes in
C4SX Version 03&quot; Section in the Appendix.</p>

<h3>IMPORTANT:<span style="mso-spacerun: yes">  </span>Known CC1B Bugs</h3>

<p class=MsoNormal>All the bugs found in C4SX V01 have been fixed by the CC1B
author in CC1B 0.7A.<span style="mso-spacerun: yes">  </span>In addition, CC1B
0.7A (or better) has some new, handy features.<span style="mso-spacerun: yes"> 
</span>Please see the &quot;Known CC1B Bugs&quot; section in the Appendix for a
list of the currently known bugs.<span style="mso-spacerun: yes">  </span></p>

<h2>Quick Start</h2>

<p class=MsoNormal>Here are the steps to quickly install C4SX and run a sample
SX C program.</p>

<h3>Needed Software</h3>

<ol style='margin-top:0in' start=1 type=1>
 <li class=MsoNormal style='mso-list:l7 level1 lfo2;tab-stops:list .5in'>You
     will need an editor.<span style="mso-spacerun: yes">  </span>We suggest
     installing &quot;notepadpp&quot;, noted as &quot;notepad++&quot; in the
     remainder of this document.<span style="mso-spacerun: yes">  </span>It is
     a simple editor with a C &quot;styling mode&quot;.<span
     style="mso-spacerun: yes">  </span>It presents the C module being edited
     and a list of the functions in the C module.<span style="mso-spacerun:
     yes">  </span>It is not visually &quot;cluttered&quot; like many IDE
     editors.<span style="mso-spacerun: yes">  </span>Any text-oriented editor
     will also work.<span style="mso-spacerun: yes">  </span>If you are a relatively
     new programmer and choose to use the standard Windows &quot;notepad&quot;
     editor, be sure that your C program files end up with a file extension of
     &quot;.c&quot; and not &quot;.txt&quot;.<span style="mso-spacerun: yes"> 
     </span>The notepad++ download URL is:
     http://notepad-plus.sourceforge.net/uk/about.php.<span
     style="mso-spacerun: yes">  </span>See the Appendix for some additional
     notepad++ information.<span style="mso-spacerun: yes">   </span>Other good
     editors and IDEs include Microsoft VC, Eclipse and Code::Blocks.</li>
 <li class=MsoNormal style='mso-list:l7 level1 lfo2;tab-stops:list .5in'>You
     will need the CC1B compiler, version 0.7A or newer.<span
     style="mso-spacerun: yes">  </span>Download it from
     http://www.bknd.com/cc1b/index.shtml.<span style="mso-spacerun: yes"> 
     </span>There are manyCC1B editions that can be downloaded.<span
     style="mso-spacerun: yes">   </span>For this Quick Start, we suggest using
     the &quot;cc1bfree.exe&quot; edition because it comes with an installer.</li>
 <li class=MsoNormal style='mso-list:l7 level1 lfo2;tab-stops:list .5in'>You
     will need the Parallax SX-Key software.<span style="mso-spacerun: yes"> 
     </span>Download it from: http://www.parallax.com/sx/downloads.asp.We are
     currently using the SX-Key 3.2.3 version.<span style="mso-spacerun: yes"> 
     </span>Other versions may also work.</li>
 <li class=MsoNormal style='mso-list:l7 level1 lfo2;tab-stops:list .5in'>You
     will need the C4SX utilities, documents, sample code and SXIO.H
     headers.<span style="mso-spacerun: yes">  </span>These can be downloaded
     from: http://www.rwsenser.com/c4sx/C4SXv03.zip.</li>
</ol>

<h3>Installations</h3>

<ol style='margin-top:0in' start=1 type=1>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>If you
     have not already done so, install the editor of your choice.<span
     style="mso-spacerun: yes">  </span>If you are unsure what to do, install
     Notepad++.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>Install
     CC1B.<span style="mso-spacerun: yes">  </span>Using the 'cc1bfree.exe'
     install is the easiest way to get CC1B going.<span style="mso-spacerun:
     yes">  </span>Word to the wise:<span style="mso-spacerun: yes">  </span>If
     you allow the install to put CC1B in the default &quot;C:\Program
     Files\bknd\CC1B&quot; folder then you will save yourself some work later
     in this Quick Start. </li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>If you
     have not already done so, install the SX-Key software and hardware.</li>
 <li class=MsoNormal style='mso-list:l0 level1 lfo3;tab-stops:list .5in'>Unzip
     the C4SX zip file into a directory.<span style="mso-spacerun: yes"> 
     </span>We strongly suggest using &quot;C:\C4SX&quot;.<span
     style="mso-spacerun: yes">   </span>If you are upgrading from an older
     C4SX version, be sure to rename your current &quot;C:\C4SX&quot;
     directory.<span style="mso-spacerun: yes">  </span>After the unzip
     operation is done, this directory should contain at least these
     files:<span style="mso-spacerun: yes">  </span>c4sx.bat, CC1B2SX.EXE,
     led28.src and ledc28.c.<span style="mso-spacerun: yes">  </span>The last
     file is a SX C sample program, 'led28.src' is a sample SX assembler
     program and the other files are briefly discussed later in this
     document.<span style="mso-spacerun: yes">  </span>Be sure the version of
     CC1B you are using matches the C4SX you are using.<span
     style="mso-spacerun: yes">  </span>If you are unsure, be sure both of them
     are the newest versions.</li>
</ol>

<h3>Hardware Setup</h3>

<p class=MsoNormal>You will need an SX Tech Board and associated hardware
(SX-Key, cables, etc) to run the sample C program. Here is a Tech Board
picture: http://www.parallax.com/images/prod_jpg/45205.jpg.<span
style="mso-spacerun: yes">  </span>You will want to wire your board as this
picture shows, EXCEPT you will want the LED on pin B0 and NOT pin B7.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>To test your SK-Key and Tech Board setup, please run the
led28.src file.<span style="mso-spacerun: yes">  </span>This is a very simple
SX assembler program that will blink the LED on pin B0.<span
style="mso-spacerun: yes">  </span>Until you have your SX board's LED blinking,
there is no point in proceeding with the next steps in this Quick Start!!<span
style="mso-spacerun: yes">  </span>Sorry.</p>

<h3>Edit, C Compile and Execution</h3>

<p class=MsoNormal>Once you know your SX configuration is correctly executing
led28.src and you see the blinking LED, you are ready to proceed and try C4SX.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>With the Command Window, Notepad++ and SX-Key all running,
this is the approximate layout you want to end up with on your Windows screen:</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600"
 o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"
 stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:431.25pt;
 height:324pt'>
 <v:imagedata src="./C4SX_Environment_files/image001.png" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=575 height=432
src="./C4SX_Environment_files/image002.jpg" v:shapes="_x0000_i1025"><![endif]></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The top-most window is from the Parallax SX-Key IDE.<span
style="mso-spacerun: yes">  </span>The middle window is from NotePad++ and the
bottom black window is the Windows Command Window (&quot;cmd.exe&quot;). </p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>To get these windows all opened, start the SX-Key IDE and
Notepad++ (or your chosen editor) from your Windows program menu or
desktop.<span style="mso-spacerun: yes">  </span>The Windows Command Window can
be started from &quot;All Programs | Accessories | Command Prompt&quot; or by
entering &quot;cmd.exe&quot; at the Windows &quot;Run&quot; option.<span
style="mso-spacerun: yes">  </span>Your Command Window will be titled
&quot;C4SX Compile Window&quot; after the c4sx bat file (script) is run the
first time.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>If you installed CC1B in the location mentioned earlier and
put the C4SX contents in &quot;C:\C4SX&quot;, you are ready to begin.<span
style="mso-spacerun: yes">  </span>If you put either of these in a different
location, you will need to modify the c4sx.bat file (script).</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The basic approach used is to edit the C program in the
editor (notepad++ in this example), to compile the program and automatically
reformat it with the c4sx.bat script and then to run the program with the
normal SX-KEY IDE.<span style="mso-spacerun: yes">  </span>The c4sx.bat also
has some special options, which are beyond the scope of this Quick Start (see
the comments in c4sx.bat for details).<span style="mso-spacerun: yes"> 
</span>Here we go:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Load the ledc28.c program into you editor.<span
style="mso-spacerun: yes">  </span>Please don't change it.<span
style="mso-spacerun: yes">  </span>Once you have looked at it, then go to the
Command Window and enter:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>cd c:\c4sx</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>This will put you in the C4SX directory.<span
style="mso-spacerun: yes">  </span>From here, enter:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>c4sx ledc28</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Do not put a &quot;.c&quot; and the end of the program
name.<span style="mso-spacerun: yes">  </span>If all has gone well, you will
see something like this appear:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>C:\C4SX&gt;c4sx ledc28<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>CC1B Ver 0.6I beta, Copyright (c) B Knudsen Data,
Norway 2002-2007<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>--&gt;
SMALL edition, Ubicom SX, 4k code, reduced optim.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>ledc28.c:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>Chip =
SX28<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>Mapped
RAM: 00h : -------- ********<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>Bank 0
RAM: 10h : =******* ********<span style="mso-spacerun: yes">  </span>(1) 30h :
******** ********<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>Bank 2
RAM: 50h : ===***** ********<span style="mso-spacerun: yes">  </span>(3) 70h :
******** ********<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>Bank 4
RAM: 90h : ******** ********<span style="mso-spacerun: yes">  </span>(5) B0h : ********
********<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>Bank 6
RAM: D0h : ******** ********<span style="mso-spacerun: yes">  </span>(7) F0h :
******** ********<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>RAM usage: 4 bytes (4 local), 132 bytes free<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun:
yes"> </span>Optimizing - removed 0 instructions (-0 %)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>File
'tmp'<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>File
'ledc28.occ'<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>Codepage
0 has<span style="mso-spacerun: yes">   </span>64 word(s) :<span
style="mso-spacerun: yes">  </span>12 %<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>Codepage
1 has<span style="mso-spacerun: yes">    </span>0 word(s) :<span
style="mso-spacerun: yes">   </span>0 %<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>Codepage
2 has<span style="mso-spacerun: yes">    </span>0 word(s) :<span
style="mso-spacerun: yes">   </span>0 %<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>Codepage
3 has<span style="mso-spacerun: yes">    </span>1 word(s) :<span
style="mso-spacerun: yes">   </span>0 %<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>File
'ledc28.hex'<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>Total of 65 code words (3 %)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>*
Estimated CODE SIZE of full optimization: 55 code words (-15 %)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>.<span style="mso-spacerun: yes">  </span>CC1B
finished<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>.<span style="mso-spacerun: yes">  </span>compile
successful<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>. <span style="mso-spacerun: yes"> </span>CC1B2SX
finished</span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The &quot;compile successful&quot; and &quot;CC1B2SX
finished&quot; output lines mean that everything has worked successfully.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The next step is to load the generated ledc28.src file into
the SX-Key and to execute it.<span style="mso-spacerun: yes">  </span>Please
load this now and then pause a minute to look at the source code.<span
style="mso-spacerun: yes">  </span>The assembler source code will have the C
code included as comments and the assembler code, generated by CC1B, is there
ready to run.<span style="mso-spacerun: yes">  </span>At this point, with your
SX Tech Board attached and powered up, run or debug the program in the SX-Key
IDE.<span style="mso-spacerun: yes">  </span>When you run the program, you
should see the LED blinking.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>If you want to experiment, you can go back into the editor
and change the timing constants for the C delay() function.<span
style="mso-spacerun: yes">  </span>After saving the change, rerun the c4sx
script, reload the generated program into the SX-Key (it will ask to do this
anyway) and then re-execute.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>If your SX setup has serial capabilities then you can run
the sertstb.sxb and sertstc.c programs.<span style="mso-spacerun: yes"> 
</span>These both require a terminal (or Windows Hyperterm) setup at 19,200
baud, no parity and no handshaking.<span style="mso-spacerun: yes">  </span>Pin
A2 is the serial input and pin A3 is the serial output.<span
style="mso-spacerun: yes">  </span>Please run sertstb.sxb first to verify your
serial configuration and then run sertstc.c.<span style="mso-spacerun: yes"> 
</span>This C program uses the sxio.h library to communicate serially.<span
style="mso-spacerun: yes">  </span>Note that this library does use the SX
interrupts.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Closing note: Depending on the acceptance of C4SX within the
SX community, we expect to work with Parallax to be able to access the SX-Key
directly from C4SX.<span style="mso-spacerun: yes">  </span>We are also
thinking about producing a &quot;plug in&quot; for at least one common
editor/IDE.<span style="mso-spacerun: yes">  </span>This would make it possible
to request the compile and run the program from within the editor/IDE.</p>

<h3>User's Guide</h3>

<p class=MsoNormal>Currently a &quot;work in progress.&quot; but some
subsections are available:</p>

<h3>CC1B RAM usage</h3>

<p class=MsoNormal>The SX28 and SX48, especially the SX28, have a very limited
amount of RAM.<span style="mso-spacerun: yes">  </span>In addition to being
limited, not all of the RAM on these chips can be used in the same manner.<span
style="mso-spacerun: yes">  </span>The CC1B compiler makes allowances for these
differences and tries to optimize the use of RAM.<span style="mso-spacerun:
yes">  </span>However, if the C programmer helps by manually placing variables
and giving the compiler hints via the C #pragma statements then the memory can
be used more effectively and the size of the actual SX program can be made much
smaller.<span style="mso-spacerun: yes">  </span>Section 2.2, &quot;Defining Variables&quot;
of the CC5X Manual, obtainable from the CC1B website, covers the details.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>In a nutshell, small C programs that only have a main()
function, that have fewer than 5 to 8 variable and that do not use the
string.h, stdlib.h, ctype.h and/or sxio.h libs likely do not need to use these
special C constructs (#pragma, bank0, shrbank, etc.).<span style="mso-spacerun:
yes">  </span>Larger programs very likely will.<span style="mso-spacerun:
yes">  </span></p>

<h3>Components</h3>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h6>C4SX Utility and Modules</h6>

<p class=MsoNormal>The C4SX utility/converter is CC1B2SX.<span
style="mso-spacerun: yes">  </span>It converts the output from CC1B to an SX
assembler program, styled for the SX-Key assembler.<span style="mso-spacerun:
yes">  </span>Note that the CC1B 0.7A version now produces assembler output
that is SX-Key usable.<span style="mso-spacerun: yes">  </span>The CC1B2SX
utility/converter is still used to handle the optional /*&lt;?asm ..... &gt;?*/
construct.<span style="mso-spacerun: yes">  </span>The C4SX modules consist
basically of the c4sx.bat script, CC1B2SX, the sxio.h header/lib file and some
sample C programs.<span style="mso-spacerun: yes">  </span>The sxio.h lib file
provides some C-like I/O functions such as getchar() and putchar().</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>In addition to sxio.h, there are other libraries
available.<span style="mso-spacerun: yes">  </span>C4SX Version 03 includes
three additional libraries in the base directory:<span style="mso-spacerun:
yes">  </span>stdlib.h, string.h and ctype.h.<span style="mso-spacerun: yes">  
</span>These libs/includes provide many of the 'normal' C string functions,
among other items.<span style="mso-spacerun: yes">  </span>These libs should be
considered as 'experimental' as their implementations could change in the next
release of C4SX.<span style="mso-spacerun: yes">   </span>The directory
'pvlibs' includes other libraries made available on the Parallax SX Forum.<span
style="mso-spacerun: yes">  </span>Many thanks, to the various authors, for
making these libs available. </p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h6>Notepad++ Editor</h6>

<p class=MsoNormal>As stated earlier, about any textual editor can be used with
C4SX.<span style="mso-spacerun: yes">  </span>Notepad++ seems to be a good
choice.<span style="mso-spacerun: yes">  </span>It is easy to use, makes good
use of the screen and does not bring unneeded complexity into the programming
process.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h6>CC1B Compiler</h6>

<p class=MsoNormal>This compiler is the backbone of C4SX.<span
style="mso-spacerun: yes">  </span>To date, it has done a very good job of
converting C code into reasonable, optimized SX code.<span style="mso-spacerun:
yes">  </span>We hope that B. Knudson will make it a full commercial product at
some point.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h6>SX-KEY IDE and SX Programmer</h6>

<p class=MsoNormal>What's to say?<span style="mso-spacerun: yes">  </span>This
is the SX IDE and programmer of choice for SX/B and SX assembler programs.</p>

<h3>Troubleshooting and Known CC1B Limits</h3>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><u>We have found the following limits with the free CC1B</u>:</p>

<ol style='margin-top:0in' start=1 type=1>
 <li class=MsoNormal style='mso-list:l1 level1 lfo5;tab-stops:list .5in'><i>Beta
     software limits:</i><span style="mso-spacerun: yes">  </span>The size of
     the resulting program is limited and some of the fancy C data types are
     not supported.<span style="mso-spacerun: yes">  </span>We have never had
     these limits impact our work. See the CC1B readme file for details.<span
     style="mso-spacerun: yes">  </span></li>
 <li class=MsoNormal style='mso-list:l1 level1 lfo5;tab-stops:list .5in'><i>The
     limit to one Commercial Product:</i><br>
     The CC1B free version readme file says: <br>
     &quot; RESTRICTIONS<br>
     <span style="mso-spacerun: yes"> </span>------------<br>
     <span style="mso-spacerun: yes">  </span>The free edition can be used to
     generate code for all prototype<br>
     <span style="mso-spacerun: yes">  </span>and non-commercial systems
     without restrictions. Permission is<br>
     <span style="mso-spacerun: yes">  </span>given to use the generated code
     in ONE commercial system.<br>
     <span style="mso-spacerun: yes">  </span>No restriction applies to source
     code written by the user.&quot;</li>
 <li class=MsoNormal style='mso-list:l1 level1 lfo5;tab-stops:list .5in'>Coding
     limits:<span style="mso-spacerun: yes">  </span>See the sxlimits.c program
     in the src\samples directory for examples of a few other limits and
     workarounds.</li>
</ol>

<h3>Future Plans for C4SX</h3>

<ol style='margin-top:0in' start=1 type=1>
 <li class=MsoNormal style='mso-list:l3 level1 lfo4;tab-stops:list .5in'>As
     mentioned in the Quick Start, we hope to utilize the SX-Key directly from
     C4SX.</li>
 <li class=MsoNormal style='mso-list:l3 level1 lfo4;tab-stops:list .5in'>Also
     as mentioned in the Quick Start, we are considering an editor &quot;plug
     in&quot; for C4SX.<span style="mso-spacerun: yes">  </span>Do you have
     strong feelings about which editor should have a C$SX &quot;plug
     in&quot;?<span style="mso-spacerun: yes">  </span>If so, make your
     feelings known!</li>
 <li class=MsoNormal style='mso-list:l3 level1 lfo4;tab-stops:list .5in'>More
     documentation and more SX C sample programs.</li>
 <li class=MsoNormal style='mso-list:l3 level1 lfo4;tab-stops:list .5in'>More
     sxio.h improvements (mainly support for more than 19.2 kb).</li>
 <li class=MsoNormal style='mso-list:l3 level1 lfo4;tab-stops:list .5in'>Combine
     the current multiple versions of CC1B SX libraries (header files) into one
     set.</li>
</ol>

<h3>Contributors and Credits for C4SX</h3>

<p class=MsoNormal>Thanks to the following people and organizations:</p>

<table border=1 cellspacing=0 cellpadding=0 style='margin-left:23.4pt;
 border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=264 valign=top style='width:2.75in;border:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <h4>Item(s)</h4>
  </td>
  <td width=295 valign=top style='width:221.4pt;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <h4>Contributor</h4>
  </td>
 </tr>
 <tr>
  <td width=264 valign=top style='width:2.75in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>CC1B Compiler</p>
  </td>
  <td width=295 valign=top style='width:221.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>B. Knudsen at www.bknd.com</p>
  </td>
 </tr>
 <tr>
  <td width=264 valign=top style='width:2.75in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>CC1B2SX utility, CCB script and VC6 IDE usage information</p>
  </td>
  <td width=295 valign=top style='width:221.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Bruce Ray</p>
  </td>
 </tr>
 <tr>
  <td width=264 valign=top style='width:2.75in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>dwutil utility, sxio.h, sample C programs<span
  style="mso-spacerun: yes">  </span>and updated c4sx script</p>
  </td>
  <td width=295 valign=top style='width:221.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Bob Senser</p>
  </td>
 </tr>
 <tr>
  <td width=264 valign=top style='width:2.75in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Many C libraries, and much valuable research and feedback</p>
  </td>
  <td width=295 valign=top style='width:221.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>Peter Verkaik</p>
  </td>
 </tr>
</table>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3>Appendix</h3>

<h6>C4SX 'Guiding Principles'</h6>

<p class=MsoNormal>C4SX is not a large project and is being done with limited
resources.<span style="mso-spacerun: yes">  </span>Therefore the following
general principles are being used to guide the project.</p>

<ol style='margin-top:0in' start=1 type=1>
 <li class=MsoNormal style='mso-list:l4 level1 lfo8;tab-stops:list .5in'>Simple
     and clear is better than complex, even if it is slightly less powerful.<br>
     Rationale:<span style="mso-spacerun: yes">  </span>Things that are clear
     and simple are normally easy to use and require little documentation and
     more-limited testing.</li>
 <li class=MsoNormal style='mso-list:l4 level1 lfo8;tab-stops:list .5in'>Generally,
     only one solution to a given problem is provided.<br>
     Rationale:<span style="mso-spacerun: yes">   </span>Extra options often
     lead to complexity, which requires extra documentation and extra testing. </li>
 <li class=MsoNormal style='mso-list:l4 level1 lfo8;tab-stops:list .5in'>C4SX
     should use standard C constructs whenever possible.<br>
     Rationale:<span style="mso-spacerun: yes">   </span>Existing (embedded) C
     programmers should be able to understand and use C4SX without lots of
     documentation or retraining.</li>
 <li class=MsoNormal style='mso-list:l4 level1 lfo8;tab-stops:list .5in'>'Field'
     changes to CC1B should not be made.<span style="mso-spacerun: yes"> 
     </span><br>
     Meaning:<span style="mso-spacerun: yes">  </span>Unless a major bug is
     found, which must be fixed, CC1B will be used as it is released.<br>
     Rationale:<span style="mso-spacerun: yes">  </span>This tends to keep
     things simple and also makes it possible for CC1B to be supported by its
     author.<span style="mso-spacerun: yes">  </span>If we change it/enhance
     it, it is no longer the product the author released.</li>
</ol>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h5><span style='font-weight:normal'>VC6 IDE Usage<o:p></o:p></span></h5>

<p class=MsoNormal>Microsoft VC6 can be used with C4SX.<span
style="mso-spacerun: yes">  </span>Here is the Custom Build information:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>MSVC custom build notes for using CC1B/C4SX with
MSVC IDE<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>edit *.c file, output *.src file.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>directory names will change with specific system
setup.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>\tmp directory used in sample is arbitrary<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>&lt;file&gt;.c source file<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>&lt;file&gt;.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>Custom build<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>File settings:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>General<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes">  </span>Always
use custom build step<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> </span>Custom
Build<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes"> 
</span>Commands:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes">  
</span>\cc1b\rev_I\task\cc1b -I\cc1b\rev_I\task<span style="mso-spacerun:
yes">  </span>-a$(InputDir)\tmp $(InputPath) <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes">  
</span>\projectx\cc1b\cc1b2sx.exe<span style="mso-spacerun: yes">  </span>&lt;
$(InputDir)\tmp &gt; $(InputPath).src<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes">  </span>Outputs:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun: yes">  
</span>nfuse.src<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>InputDir=\projectx\firmware\nfusion<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>InputPath=..\NFUSE.C<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'>&quot;nfuse.src&quot; : $(SOURCE)
&quot;$(INTDIR)&quot; &quot;$(OUTDIR)&quot;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun:
yes"> </span>\cc1b\task\cc1b -I\cc1b\task<span style="mso-spacerun: yes"> 
</span>-a$(InputDir)\tmp $(InputPath) <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:"Lucida Console"'><span style="mso-spacerun:
yes"> </span>\projectx\cc1b\cc1b2sx.exe<span style="mso-spacerun: yes"> 
</span>&lt; $(InputDir)\tmp &gt; $(InputPath).src</span> </p>

<p class=MsoNormal><span style="mso-spacerun: yes"> </span></p>

<p class=MsoNormal>End Custom Build</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h6>NotePad++ Advanced Usage</h6>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>NotePad++ has &quot;plug in&quot; support and one of these
is &quot;NppExec&quot;.<span style="mso-spacerun: yes">  </span>From a running
NotePad++ window, if you follow &quot;Plug Ins | NppExec | Execute...&quot; and
enter &quot;cmd.exe&quot; in the &quot;command(s)&quot; window then you will be
able to run C4SX from within NotePad++.<span style="mso-spacerun: yes"> 
</span>Just give it the same commands as outline for the Command Window in the
Quick Start.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h6>Library: sxio.h</h6>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The sxio.h is a C serial I/O library for the SX.<span
style="mso-spacerun: yes">  </span>If you open this include file, you will see
comments describing the baud rate it uses and the I/O pins.<span
style="mso-spacerun: yes">  </span>It provides several functions including
standard C-like _kbhit(), getchar(), putchar(), and puts() functions.<span
style="mso-spacerun: yes">  </span>Note that this C-based function library uses
SX interrupts.<span style="mso-spacerun: yes">  </span>To use these functions,
you will need a Parallax USB2SER or MAX RS-232 chip, and RS-232 device
(terminal or PC with HyperTerm, etc.) attached to your SX Tech Board.<span
style="mso-spacerun: yes">  </span>See sertstc.c for a usage example.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h6>Library: vplibs</h6>

<p class=MsoNormal>Experimental versions of the string.h, ctype.h and stdlib.h
libraries are included in the base C4SX directory.<span style="mso-spacerun:
yes">  </span>These may change internally in the next version of C4SX.<span
style="mso-spacerun: yes">  </span>In addition, the 'vplibs' directory contains
additional C libraries from the Parallax SX Forum.<span style="mso-spacerun:
yes">  </span>To use the vplibs, unzip the file, rename the existing string.h,
ctype.h and stdlib.h files (in your C4SX directory) and then copy the new libs
from the 'vplibs' directory to your C4SX directory.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h6>Sample C Programs</h6>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The C4SX &quot;src&quot; directory supplies a set of sample
C programs.<span style="mso-spacerun: yes">  </span>These programs show how to
code past some CC1B limits and how the SX-Key break debugger can be used.<span
style="mso-spacerun: yes">  </span>Version 03 of SX4C includes well-tested
sample programs, some that use sxio.h.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h6>Changes in C4SX Version 03</h6>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Version 03 contains changes in these areas:</p>

<p class=MsoNormal>1)<span style="mso-spacerun: yes">  </span>CC1B has been
updated by the author to fix all the bugs found in C4SX Versions 01/ 02.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>2)<span style="mso-spacerun: yes">  </span>CC1B new
feature:<span style="mso-spacerun: yes">  </span>The &quot;RESET main&quot; is
automatically generated.<span style="mso-spacerun: yes">  </span>You should
remove this line from your C source code.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>3)<span style="mso-spacerun: yes">  </span>CC1B new
feature:<span style="mso-spacerun: yes">  </span>The &quot;pragma asmDir:
xxxxxx&quot; support has been added.<span style="mso-spacerun: yes"> 
</span>For example:</p>

<p class=MsoNormal style='text-indent:.5in'>#pragma asmDir:<span
style='mso-tab-count:1'>          </span>DEVICE OSCHS3</p>

<p class=MsoNormal style='text-indent:.5in'>#pragma asmDir:<span
style='mso-tab-count:1'>          </span>IRC_CAL IRC_FAST</p>

<p class=MsoNormal style='text-indent:.5in'>#pragma asmDir:<span
style='mso-tab-count:1'>          </span>FREQ<span style='mso-tab-count:1'>  </span>50_000_000</p>

<p class=MsoNormal style='text-indent:.5in'>#pragma asmDir:<span
style='mso-tab-count:1'>          </span>ID<span style='mso-tab-count:1'>        </span>'project'</p>

<p class=MsoNormal>This feature can replace the existing /*&lt;?asm
&lt;whatever&gt; &gt;?*/ functionality.<span style="mso-spacerun: yes"> 
</span>New C programs should use this #pragma technique instead of the
/*&lt;?asm ... ?&gt;*/ technique.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>4)<span style="mso-spacerun: yes">  </span>C4SX.bat script
improvement:<span style="mso-spacerun: yes">  </span>The -V option has been
added to the CC1B call.<span style="mso-spacerun: yes">  </span>This causes a
&quot;.var&quot; file to be generated, showing the allocation of variables in
the SX RAM.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>5)<span style="mso-spacerun: yes">  </span>C4SX.bat script
improvement:<span style="mso-spacerun: yes">  </span>The results of the
compiler are more closely checked to verify that the compile is correct before
the CC1B2SX converter is called.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h6>Changes in C4SX Version 02</h6>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Version 02 contains changes in three basic areas:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>1)<span style="mso-spacerun: yes">  </span>The
/*&lt;?asm<span style="mso-spacerun: yes">     </span>.... whatever....<span
style="mso-spacerun: yes">   </span>?&gt;*/ notation was added as a method to
pass SX assembler directives and<span style="mso-spacerun: yes"> 
</span>instructions 'around' CC1B to the SX-Key.<span style="mso-spacerun:
yes">  </span>In other words, the 'whatever' in the previous sentence is not
seen by CC1B but is seen the SX-Key software.<span style="mso-spacerun: yes"> 
</span>This enables the various DEVICE, FREQ, etc. SX directives to be put in
the C program.<span style="mso-spacerun: yes">  </span>This removes the need
for the CC1B2SX.HDR and TRL files.<span style="mso-spacerun: yes">  </span>They
are no longer used.<span style="mso-spacerun: yes">  </span>In addition, this
usage of /*&lt;?asm break ?&gt;*/ makes it possible to put an SX-Key 'break' in
the C program.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>2)<span style="mso-spacerun: yes">  </span>The second change
is the modification of the CC1B2SX program.<span style="mso-spacerun: yes"> 
</span>As mentioned above, it no longer uses the CC1B2SX.HDR file.<span
style="mso-spacerun: yes">  </span>This file was often the location of the
SX-Key directives.<span style="mso-spacerun: yes">  </span>Now these need to be
put directly in the C source code.<span style="mso-spacerun: yes">  </span>Here
is an example:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>/*&lt;?asm</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>DEVICE
OSCHS3</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>IRC_CAL
IRC_FAST</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>FREQ<span
style='mso-tab-count:1'>  </span>50_000_000</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>RESET<span
style='mso-tab-count:1'> </span>main</p>

<p class=MsoNormal><span style='mso-tab-count:1'>            </span>ID<span
style='mso-tab-count:1'>        </span>'project'</p>

<p class=MsoNormal>?&gt;*/</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Note:<span style="mso-spacerun: yes">  </span>This
/*&lt;?asm .... whatever ..... ?&gt;*/ syntax is a bit odd -- but it makes it
so that these instructions look like comments to CC1B and makes it easy for
CC1B2SX utility to find these special areas since &quot;&lt;?asm&quot; and
&quot;?&gt;&quot; are unusual literals in a C context.<span
style="mso-spacerun: yes">  </span>If you have used ASP or PHP, you have seen
these constructs before.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>3)<span style="mso-spacerun: yes">  </span>The sxio.h
library is better documented.<span style="mso-spacerun: yes">  </span>It is
used in the sertstc.c program.<span style="mso-spacerun: yes">  </span>If you
are going to run this C program, consider running sertstb.sxb first to verify
your serial I/O configuration.<span style="mso-spacerun: yes">  </span>The
sxio.c library contains basic C-style low-level I/O functions (getchar(),
putchar(), puts(), _kbhit()) and a delay function (delay_milliseconds()).<span
style="mso-spacerun: yes">  </span>There are also serial_on() and serial_off()
function.<span style="mso-spacerun: yes">  </span>These two functions configure
resources and start and stop the interrupts, respectively.<span
style="mso-spacerun: yes">  </span>The serial_off() function should always be
called before a program terminates or the last character sent may get
truncated, due to the use of asynchronous I/O.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h6>Known CC1B Bugs</h6>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Complex software tends to have bugs and CC1B appears to be
no exception.<span style="mso-spacerun: yes">  </span>As bugs are found and
verified, they are passed to the CC1B author.<span style="mso-spacerun: yes"> 
</span>The CC1B author adds them to his CC1B 'bug list&quot;.<span
style="mso-spacerun: yes">  </span>As CC1B is a free beta, fixes may take some
time.<span style="mso-spacerun: yes">  </span>Here is a list of known, open
bugs, fixed bugs and workarounds:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Open:</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>As of 9/4/2007, no known bugs!</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Fixed (in CC1B 0.7A and C4SXv03):</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>1)<span style="mso-spacerun: yes">  </span>FIXED: Issue with
'const char * pointers'.<span style="mso-spacerun: yes">  </span>C example: int
puts(const char *in_str)</p>

<p class=MsoNormal>The root issue is with the pointers that access the const
char data.<span style="mso-spacerun: yes">  </span>Simple solution is not to
use 'const char' coding techniques.<span style="mso-spacerun: yes">  </span>If
you must use them then be sure the pointer to the const char data is in the
lower 4 pages of RAM.<span style="mso-spacerun: yes">  </span>This approach
allows the sertstc.c and sxstring.c sample programs to work.<span
style="mso-spacerun: yes">  </span>This bug appears on the SX28 and is likely
also on the SX48.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>2)<span style="mso-spacerun: yes">  </span>FIXED: Issue with
setting TRIS&lt;x&gt;, PLP_&lt;x&gt; and LVL_&lt;x&gt; mode values for I/O on
the SX48.<span style="mso-spacerun: yes">  </span>The first on of these
registers gets set in a C code sequence, sometimes the others do not.<span
style="mso-spacerun: yes">  </span>The SX48 sxstring48.c program works around
this by only setting TRISA and not setting the other two mode values as they
are not really needed.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>3)<span style="mso-spacerun: yes">  </span>FIXED: Suspected
issue with the correct setting of RAM banks (the FSR register).<span
style="mso-spacerun: yes">  </span>In some limited cases, it appears the FSR
register is not set correctly when the C code is changing from one RAM bank to
another.<span style="mso-spacerun: yes">   </span>As of 08/11/2007 this bug is
not verified.<span style="mso-spacerun: yes">   </span>Simple C programs are
not likely to experience this bug.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

</div>

</body>

</html>
<!-- text below generated by server. PLEASE REMOVE --><!-- Counter/Statistics data collection code --><script language="JavaScript" src="http://us.js2.yimg.com/us.js.yimg.com/lib/smb/js/hosting/cp/js_source/whv2_001.js"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.webhosting.yahoo.com/visit.gif?us1226186847" alt="setstats" border="0" width="1" height="1"></noscript>